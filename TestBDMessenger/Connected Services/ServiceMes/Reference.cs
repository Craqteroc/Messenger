//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestBDMessenger.ServiceMes {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMes.IServiceMessenger")]
    public interface IServiceMessenger {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessenger/Autoriz", ReplyAction="http://tempuri.org/IServiceMessenger/AutorizResponse")]
        int Autoriz(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessenger/Autoriz", ReplyAction="http://tempuri.org/IServiceMessenger/AutorizResponse")]
        System.Threading.Tasks.Task<int> AutorizAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessenger/Disconnect", ReplyAction="http://tempuri.org/IServiceMessenger/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMessenger/Disconnect", ReplyAction="http://tempuri.org/IServiceMessenger/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMessenger/SendMsg")]
        void SendMsg(string mes, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceMessenger/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string mes, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMessengerChannel : TestBDMessenger.ServiceMes.IServiceMessenger, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceMessengerClient : System.ServiceModel.ClientBase<TestBDMessenger.ServiceMes.IServiceMessenger>, TestBDMessenger.ServiceMes.IServiceMessenger {
        
        public ServiceMessengerClient() {
        }
        
        public ServiceMessengerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceMessengerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMessengerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMessengerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Autoriz(string email, string password) {
            return base.Channel.Autoriz(email, password);
        }
        
        public System.Threading.Tasks.Task<int> AutorizAsync(string email, string password) {
            return base.Channel.AutorizAsync(email, password);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string mes, int id) {
            base.Channel.SendMsg(mes, id);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string mes, int id) {
            return base.Channel.SendMsgAsync(mes, id);
        }
    }
}
